spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    stream:
      username: guest
      password: guest
    port: 5672
  cloud:
    gateway:
      routes:
        - id: gather-service
          uri: lb://GATHER-SERVICE
          predicates:
            - Path=/gather-service/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/gather-service/(?<segment>.*), /$\{segment}

        - id: join-service
          uri: lb://JOIN-SERVICE
          predicates:
            - Path=/join-service/**
            - Method=GET, POST, DELETE, PATCH, PUT
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/join-service/(?<segment>.*), /$\{segment}

        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/members
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
            - AuthenticationHeaderFilter

        - id: chat-service
          uri: lb:ws://CHAT-SERVICE
          predicates:
            - Path=/chat-service/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/chat-service/(?<segment>.*), /$\{segment}
      default-filters:
        - name: LoggingFilter
          args:
            baseMessage: Gateway Service Logger
            preLogger: true
            postLogger: true
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://127.0.0.1:5500"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            allowedHeaders:
              - "*"
            allowedCredentials: true

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka

token:
  expiration_time: 21600000 # 60 * 60 * 6 * 1000=> 6시간
  secret: testtoken # TODO 설정 파일 보안정보 옮기기

auth:
  no-header-msg: 로그인 해주세요.
  invalid: 인증토큰이 유효하지 않습니다.

server:
  port: 8000

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info